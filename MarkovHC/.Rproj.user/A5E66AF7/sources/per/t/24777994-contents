library(splatter)
library(scater)
library(ggplot2)
library(Seurat)
library(car)
library(rgl)
library(MarkovHC)
options(rgl.useNULL=FALSE)
# Linear paths
params.groups <- newSplatParams(batchCells = 1000, 
                                nGenes = 5000,
                                group.prob = c(0.35, 0.3,0.35),
                                de.prob = 0.5, de.facLoc = 0.2,
                                path.from = c(0, 1, 2),
                                path.skew = c(1,0,0),
                                path.length = c(10,10,10))
sim2Object <- splatSimulatePaths(params.groups,verbose = FALSE)
sim2 <- scater::normalize(sim2Object)
sim2_plot <- scater::plotPCA(sim2, colour_by = "Group") + ggtitle("Linear paths")
sim2_plot
mat2<-counts(sim2Object)

#Seurat
PATHobject <- CreateSeuratObject(counts = mat2,
                                 project = 'PATH',
                                 min.cells = 10,
                                 min.feature = 50)
PATHobject@meta.data$Group <- sim2Object$Group
VlnPlot(PATHobject, features = c("nFeature_RNA", "nCount_RNA"), ncol = 2)
PATHobjectplot <- FeatureScatter(PATHobject, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
PATHobjectplot

PATHobject <- NormalizeData(PATHobject, normalization.method = "LogNormalize", scale.factor = 10000)

PATHobject <- FindVariableFeatures(PATHobject, selection.method = "vst", nfeatures = 3000)
# Identify the 10 most highly variable genes
PATHobjecttop10 <- head(VariableFeatures(PATHobject), 10)
# plot variable features with and without labels
PATHobjectplot1 <- VariableFeaturePlot(PATHobject)
PATHobjectplot2 <- LabelPoints(plot = PATHobjectplot1, points = PATHobjecttop10, repel = TRUE)
PATHobjectplot2
PATHobject <- ScaleData(PATHobject, features = rownames(PATHobject))
PATHobject <- RunPCA(PATHobject, features = VariableFeatures(object = PATHobject), verbose=FALSE)
ElbowPlot(PATHobject, ndims = 50)

#MarkovHC
MarkovHC_PATH <- MarkovHC(origin_matrix=Embeddings(object = PATHobject, reduction = "pca")[,1:5]%>%t(),
                          transformtype="none",
                          KNN=50,
                          basecluster="kmeans",
                          dobasecluster=TRUE,
                          baseclusternum=200,
                          emphasizedistance=1,
                          weightDist=2,
                          weightDens=0.5,
                          cutpoint=0.01,
                          showprocess=FALSE,
                          bn=2,
                          minBasinSize=0.2,
                          noiseBasinSize=20)

#Figures
mytheme <- theme(panel.grid.major =element_blank(),
                 panel.grid.minor = element_blank(),
                 panel.background = element_blank(),
                 axis.line = element_line(size = 1,
                                          colour = "black"),
                 axis.title.x =element_text(size=20),
                 axis.text.x = element_text(size = 20,
                                            family = "sans",
                                            color = "black",
                                            face = "bold",
                                            vjust = 0,
                                            hjust = 0),
                 axis.text.y = element_text(size = 20,
                                            family = "sans",
                                            color = "black",
                                            face = "bold",
                                            vjust = 0,
                                            hjust = 1),
                 axis.title.y=element_text(size=20,
                                           family = "sans",
                                           color = "black",
                                           face = "bold"),
                 legend.text = element_text(size=15,
                                            family = "sans",
                                            color = "black",
                                            face = "bold"),
                 legend.title = element_text(size=15,
                                             family = "sans",
                                             color = "black",
                                             face = "bold"),
                 legend.background = element_blank(),
                 legend.key = element_blank()
)
#Figure3.A
#layout <- as.data.frame(TSNE_result$Y)
layout <- sim2_plot$data%>%as.data.frame()
layout$stages <- layout$colour_by
pdf(file = 'F:/Projects/MarkovHC/Figures/Figure3.PATH.A.pdf', width = 9, height = 5.5)
ggplot(data=layout, mapping =  aes(x=X, y=Y)) +
  geom_point(size=2, shape=21, aes(fill=stages), color="#525252")+
  xlim(min(layout$X)-1,max(layout$X)+1)+
  ylim(min(layout$Y)-1,max(layout$Y)+1)+
  mytheme
dev.off()

#Figure3.B
sankeyResult_PATH <- sankeyResult(MarkovObject = MarkovHC_PATH,
                                      MarkovLevels = 16:19)

for (i in 1:ncol(sankeyResult_PATH)) {
  sankeyResult_PATH[,i] <- paste(colnames(sankeyResult_PATH)[i],
                                     sankeyResult_PATH[,i],
                                     sep = '_basin')
}
sankeyResult_PATH$Freq <- rep(1,nrow(sankeyResult_PATH))

head(sankeyResult_PATH)

layout <- sim2_plot$data%>%as.data.frame()
basins <- character(length = ncol(mat2))
for (i in 1:length(basins)) {
  indexi <- subset(sankeyResult_PATH,sankeyResult_PATH[,1]==paste('index_basin',i,sep = ""))
  basins[i] <- paste(unique(indexi[,3])%>%sort(), collapse = '+')
}
level <- 17
for (i in 1:length(MarkovHC_PATH$hierarchicalStructure[[level]]$attractorPoints)) {
  basins[MarkovHC_PATH$hierarchicalStructure[[level]]$attractorPoints[[i]]] <- "attractors"
}

label <- findTransitionPoints(MarkovObject = MarkovHC_PATH,
                              level = level,
                              basinA = 1,
                              basinB = 2)
basins[which(label==1)] <- 'transition points\nbetween 1 and 2'

label <- findTransitionPoints(MarkovObject = MarkovHC_PATH,
                              level = level,
                              basinA = 3,
                              basinB = 1)
basins[which(label==1)] <- 'transition points\nbetween 3 and 1'

layout$basins <- basins
pdf(file = 'F:/Projects/MarkovHC/Figures/Figure3.PATH.B.pdf', width = 9, height = 5.5)
ggplot(data=layout, mapping =  aes(x=X, y=Y)) +
  geom_point(size=3, shape=21, aes(fill=basins), color="#525252")+
  xlim(min(layout$X)-1,max(layout$X)+1)+
  ylim(min(layout$Y)-1,max(layout$Y)+1)+
  mytheme+
  scale_fill_manual(
    values = c("attractors"=alpha("#e41a1c",1),
               "level17_basin1"=alpha("#377eb8",0.7),
               "level17_basin2"=alpha("#4daf4a",0.7),
               "level17_basin3"=alpha("#984ea3",0.7),
               "transition points\nbetween 1 and 2"=alpha("#ffff33",1),
               "transition points\nbetween 3 and 1"=alpha("#ff7f00",1)),
    breaks = c("attractors",
               "level17_basin1",
               "level17_basin2",
               "level17_basin3",
               'transition points\nbetween 1 and 2',
               "transition points\nbetween 3 and 1"))
dev.off()

save.image('F:/Projects/MarkovHC/results/TransitionAndPath/TransitionAndPath.RData')

#Figure3.C 3 dimensions
sim2_PCA <- scater::runPCA(sim2, ncomponents = 3)
sim2_PCA_cor <- sim2_PCA@reducedDims$PCA
colors <- c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ffff33","#ff7f00")
colors <- colors[factor(layout$basins)]
sin2_3dplot <- scatter3d(x=sim2_PCA_cor[,1],
                      y=sim2_PCA_cor[,2], 
                      z=sim2_PCA_cor[,3],
                      point.col=colors,
                      pch = 21,
                      sphere.size=2,
                      surface=FALSE,
                      xlab = "PC1", ylab = "PC2",
                      zlab = "PC3", axis.scales = FALSE,
                      color = colors)
rgl.postscript("F:/Projects/MarkovHC/Figures/Figure3.PATH.3d.pdf", "pdf", drawText = FALSE)

# Works well in RStudio Viewer

# HTML export works without the toggle buttons
#htmlwidgets::saveWidget(rglwidget(), 'F:/Projects/MarkovHC/Figures/Figure3.PATH.3Dplot.html')


 
#Figure3.C 3 dimensions 2
layout <- sim2_plot$data%>%as.data.frame()
layout$stages <- layout$colour_by
colors <- c("#984ea3","#377eb8","#4daf4a")
colors <- colors[factor(layout$stages)]
sin2_3dplot2 <- scatter3d(x=sim2_PCA_cor[,1],
                         y=sim2_PCA_cor[,2], 
                         z=sim2_PCA_cor[,3],
                         point.col=colors,
                         pch = 21,
                         sphere.size=2,
                         surface=FALSE,
                         xlab = "PC1", ylab = "PC2",
                         zlab = "PC3", axis.scales = FALSE,
                         color = colors)
rgl.postscript("F:/Projects/MarkovHC/Figures/Figure3.PATH.3d.2.pdf", "pdf", drawText = FALSE)
# Works well in RStudio Viewer

# HTML export works without the toggle buttons
#htmlwidgets::saveWidget(rglwidget(), 'F:/Projects/MarkovHC/Figures/Figure3.PATH.3Dplot2.html')

#Figure3.C 3 dimensions 3 with the path from 1 to 2
layout <- sim2_plot$data%>%as.data.frame()
basins <- character(length = ncol(mat2))
for (i in 1:length(basins)) {
  indexi <- subset(sankeyResult_PATH,sankeyResult_PATH[,1]==paste('index_basin',i,sep = ""))
  basins[i] <- paste(unique(indexi[,3])%>%sort(), collapse = '+')
}
level <- 17
for (i in 1:length(MarkovHC_PATH$hierarchicalStructure[[level]]$attractorPoints)) {
  basins[MarkovHC_PATH$hierarchicalStructure[[level]]$attractorPoints[[i]]] <- "attractors"
}

label <- findTransitionPath(MarkovObject = MarkovHC_PATH,
                            level = level,
                            basinA = 1,
                            basinB = 2)
basins[which(label==1)] <- 'transition path\nfrom 1 to 2'

label <- findTransitionPoints(MarkovObject = MarkovHC_PATH,
                              level = level,
                              basinA = 3,
                              basinB = 1)
basins[which(label==1)] <- 'transition path\nfrom 3 to 1'

sim2_PCA <- scater::runPCA(sim2, ncomponents = 3)
sim2_PCA_cor <- sim2_PCA@reducedDims$PCA
colors <- c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ffff33","#ff7f00")
colors <- colors[factor(basins)]
scatter3d(x=sim2_PCA_cor[,1],
                         y=sim2_PCA_cor[,2], 
                         z=sim2_PCA_cor[,3],
                         point.col=colors,
                         pch = 21,
                         sphere.size=2,
                         surface=FALSE,
                         xlab = "PC1", ylab = "PC2",
                         zlab = "PC3", axis.scales = FALSE,
                         color = colors)
rgl.postscript("F:/Projects/MarkovHC/Figures/Figure3.PATH.3d.path2.pdf", "pdf", drawText = FALSE)






#Figure2.C
centrality_scores <- MarkovHC_PATH$midResults$centrality_scores
pdf(file = 'F:/Projects/MarkovHC/Figures/Figure3.PATH.centrality_scores.pdf', width = 7.5, height = 5.5)
ggplot(data=layout, mapping =  aes(x=X, y=Y, color=centrality_scores)) +
  geom_point(size=1, shape=19)+
  xlim(min(layout$X)-1,max(layout$X)+1)+
  ylim(min(layout$Y)-1,max(layout$Y)+1)+
  mytheme+
  xlab("X") + ylab("Y")
dev.off()

#Figure2.D
dat <- sankeyResult_PATH[,2:5] %>%
  group_by(level40,level41,level42,level43) %>%
  summarise(freq = n()) %>%
  ungroup()

orderedMarkov_3 <- orderMarkovHC(MarkovObject=MarkovHC_PATH,
                                 MarkovLevels=1:43,
                                 orderLevels=1:43)

dat$level40 <- factor(dat$level40,levels = paste("level40_basin",unique(orderedMarkov_3$level40),sep=""))
dat$level41 <- factor(dat$level41,levels = paste("level41_basin",unique(orderedMarkov_3$level41),sep=""))
dat$level42 <- factor(dat$level42,levels = paste("level42_basin",unique(orderedMarkov_3$level42),sep=""))
dat$level43 <- factor(dat$level43,levels = paste("level43_basin",unique(orderedMarkov_3$level43),sep=""))
pdf(file= 'F:/Projects/MarkovHC/Figures/Figure2.D.alluvial.pdf', width = 20, height = 10)
print(alluvial::alluvial(dat[,1:4], 
                         freq=dat$freq,
                         xw=0.2, alpha=1, gap.width=0.1,cw=0.2,
                         col=c("#66c2a5",
                               "#a6d854",
                               "#8da0cb",
                               "#1f78b4",
                               "#6a3d9a",
                               "#ffd92f",
                               "#fc8d62",
                               "#e78ac3"
                         ),
                         border=0,
                         blocks=TRUE, cex = 2, cex.axis = 2
))
dev.off()

#downsample the data and choose different dimensions to test the robust of MarkovHC
load('F:/Projects/MarkovHC/results/TransitionAndPath/TransitionAndPath.RData')
layout <- sim2_plot$data%>%as.data.frame()
layout$stages <- layout$colour_by
colors <- c("#984ea3","#377eb8","#4daf4a")
colors <- colors[factor(layout$stages)]
downSampled_PATH <- Embeddings(object = PATHobject, reduction = "pca")[,1:5]%>%t()

MarkovHC_PATH <- MarkovHC(origin_matrix=,
                          transformtype="none",
                          KNN=50,
                          basecluster="kmeans",
                          dobasecluster=TRUE,
                          baseclusternum=200,
                          emphasizedistance=1,
                          weightDist=2,
                          weightDens=0.5,
                          cutpoint=0.01,
                          showprocess=FALSE,
                          bn=2,
                          minBasinSize=0.2,
                          noiseBasinSize=20)













