library(MarkovHC)
?all_shortest_paths
g <- make_ring(10)
plot(g)
distances(g, v=5, to=10, mode = 'out')
all_shortest_paths(g, from =5, to=10, mode = 'out')
test <- all_shortest_paths(g, from =5, to=10, mode = 'out')
View(test)
test[[1]]
test[[1]]%>%length()
test[[1]]
test[[1]][1]
test[[1]][2]
test[[1]][[1]]
test[[1]][1]
as.vector(test)
as.vector(test[[1]])
test[[1]][1]
test[[1]][[1]]
test[[1]][[1]][1]
all_shortest_paths(g, 5, c(6,7))
test <- all_shortest_paths(g, 5, c(6,7))
test$res
length(test)
test
length(test)
length(test[[1]])
c(test[[1]],test[[1]])%>%length()
test2 <- c(test[[1]],test[[1]])
test2
test2[[1]]
test2[[1]][1]
test2[[1]][2]
test2[[1]][1]
is.infinite(matrix(Inf,3,3))
sum(is.infinite(matrix(Inf,3,3)))
?as.formula
load('F:/Projects/MarkovHC/results/simulationData/example6.RData')
View(MarkovHC_6)
load('F:/Projects/MarkovHC/results/GSE75748/GSE75748.RData')
View(MarkovHC_GSE75748)
test <- c(-0.1,1,1)
length(which(test<0))
test <- c(2,1,1)
length(which(test<0))
library(ggraph)
?ggraph
(0.03^3)*10000
(0.03^3)*10000*2
(0.03^3)*10000*2*2
(0.01^3)*10000*2*2
(0.06*0.06*0.03)*10000
(0.02*0.02*0.01)*10000
(0.06*0.03*0.03)*10000
clear()
(0.01^3)*1000000
library(igraph)
?cluster_louvain()
27*1.5
27*1.4
?Func.SNN
install.packages("HighDimOut")
?sNN
library(sNN)
??sNN
test1 <- rnorm(10000*10000, 10000, 10000)
test <- dist(test1, method = "minkowski",p=2)
install.packages('HighDimOut')
library(seurat)
library(Seurat)
test <- FindNeighbors(object = matrix(1:1000000, 1000, 1000))
test1 <- matrix(1:1000000, 1000, 1000)
rownames(test1) <- 1:1000
colnames(test1) <- 1:1000
test <- FindNeighbors(object = test1)
test
class(test)
length(test)
class(test$nn)
class(test$Snn)
class(test$snn)
?FindNeighbors
?Graphs
class(test$snn)
test2 <- test$snn
test2
test2 <- as.matrix(test2)
class(test2)
dim(test2)
test1 <- matrix(1:200000, 200, 1000)
test <- FindNeighbors(object = test1)
rownames(test1) <- 1:200
colnames(test1) <- 1:1000
test <- FindNeighbors(object = test1)
dim(as.matrix(test$snn))
rownames(as.matrix(test$snn))
isSymmetric(as.matrix(test$snn))
?degree
g <- make_ring(10)
plot(g)
degree(g)
class(test2)
dim(test2)
test2[1:10,1:10]
test1[1:10,1:10]
test <- FindNeighbors(object = test1)
as.matrix(test$snn)[1:10,1:10]
as.matrix(test$snn)[1:100,1:100]
?kmeans
exp(-30)
library(MarkovHC)
MarkovHC::getNodes
orderLevels = 1:10
orderLevels <- orderLevels[order(orderLevels, decreasing = TRUE)]%>%
paste('level',., sep='')%>%
paste(., collapse = '+')%>%
paste('~',., sep = '')
as.formula(orderLevels)
test <- data.frame()
test
test[1,1] <- '('
test
test <- data.frame(c(1,2,3,4,5,6))
test
test <- as.character(test[,1])
test
length(test)
test[1]
test[2]
test <- as.vector(test)
test
length(test)
test <- data.frame(c(1,2,3,4,5,6))
test <- as.vector(test)
test
test <- as.vector(test[,1])
test
lenght(test)
length(test)
test[1]
paste(test, collapse = '')
which(test==1)
which(test==2)
class(test)
?stri_sub
??stri_sub
test
test <- as.character(test)
test
grep('2', test)
grep('3', test)
test[7] <- 'c'
test
grep('c', test)
test[2] <- 'a'
test
test[2] <- 'c'
test
grep('c', test)
min(grep('c', test))
?all_shortest_paths
library(igraphg)
library(igraph)
?all_shortest_paths
g <- make_ring(10)
all_shortest_paths(g, 1, 6:8)
test <- all_shortest_paths(g, 1, 6:8)
class(test)
test$res
test$nrgeo
shortest_paths(g, 1, 6:8)
test
test
test[[1]]
class(test[[1]])
length(test[[1]])
test[[2]]
test3 <- test[[1]]
test3
length(test3)
test <- all_shortest_paths(g, 2, 6:8)
test
test3 <- c(test3, test[[1]])
test3
length(test3)
test3[1]
test3[[1]]
test3[[1]][1]
distances(g,v=1,to=10, mode="out")
distances(g,v=1:2,to=10, mode="out")
c(1,2,3) %in% c(2,3,4,5,6)
?floor
ceiling(1.2)
devtools::document()
?cluster_louvain
library(MarkovHC)
?cluster_louvain
?aggregateRanks
??aggregateRanks
table(c(1,1,1,1,1,2,2,2,2,2,3,3,4,4,4,5,5))
max(table(c(1,1,1,1,1,2,2,2,2,2,3,3,4,4,4,5,5)))
table(c(1,1,1,1,1,2,2,2,2,2,3,3,4,4,4,5,5,6))
max(table(c(1,1,1,1,1,2,2,2,2,2,3,3,4,4,4,5,5)))
?graph_from_adjacency_matrix
?igraph::graph_from_adjacency_matrix
??enrichGO
?as.sparse
??as.sparse
?Seurat::FindNeighbors
?t()
?SiZer::piecewise.linear
?apply
install.packages('qlcMatrix')
library('qlcMatrix')
