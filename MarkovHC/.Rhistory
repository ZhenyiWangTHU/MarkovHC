basin_indice <- basin_indice+1
}
##step05.5 update the pseudo energy matrix
C_matrix_updated <- matrix(data = 0, nrow = basinNum, ncol = basinNum)
for (i in 1:basinNum) {
for (j in 1:basinNum) {
if(i==j){next}
C_matrix_updated[i,j] <- distances(graph = C_matrix_graph_object,
v = attractors[[i]],
to = basins[[j]],
mode = 'out',
weights = graph_attr(C_matrix_graph_object,'weight'),
algorithm = "dijkstra")%>%min()
}
}
##step05.6 constructe the list to store the result of MarkovHC algorithm
level_result <- list(basins=basins,
attractors=attractors,
basinPoints=basinPoints,
attractorPoints=attractorPoints,
basinNum=basinNum)
MarkovHC_result <- c(MarkovHC_result, level_result)
if(basinNum==1){
##step06. Output the results---------------------------------------------
#The input parameters
inputParameters <- list(
minrt=minrt,
transformtype=transformtype,
KNN=KNN,
basecluster=basecluster,
dobasecluster=dobasecluster,
baseclusternum=baseclusternum,
emphasizedistance=emphasizedistance,
weightDist=weightDist,
weightDens=weightDens,
cutpoint=cutpoint,
showprocess=showprocess,
bn=bn,
stop_rate=stop_rate
)
#The results among the process
midResults <- list(
symmetric_KNN_graph_object = symmetric_KNN_graph_object,
centrality_scores = centrality_scores,
symmetric_KNN_graph_cluster = symmetric_KNN_graph_cluster,
centrality_scores_cluster = centrality_scores_cluster,
transitionMatrix = transitionMatrix
)
#The MarkovHC object
MarkovHC_object <- list(
hierarchicalStructure = MarkovHC_result,
inputParameters = inputParameters,
midResults = midResults
)
stopCluster(cl)
return(MarkovHC_object)
}
##step07.1 update the transition probability matrix
P_updated <- update_P(C_matrix_updated=C_matrix_updated, C_cut=cutpoint)
levels_indice <- levels_indice + 1
}
}
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
Matrix(matrix(1:9,3,3), sparse = TRUE)
as(matrix(1:9,3,3), "dgCMatrix")
as(matrix(1:9,3,3), "dgCMatrix") %>% summary() %>% as.data.frame()
as(matrix(1:9,3,3), "dgCMatrix") %>% summary()
as(matrix(1:9,3,3), "dgCMatrix") %>% summary() %>% as.data.frame()
class(as(matrix(1:9,3,3), "dgCMatrix"))
remove.packages(MarkovHC)
remove.packages('MarkovHC')
library(MarkovHC)
library(MarkovHC)
install.packages("F:/Github/MarkovHC/MarkovHC_1.0.0.zip", repos = NULL, type = "win.binary")
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
?summary()
library(Matrix)
?summary()
?Summary
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
?Matrix::summary
??summary
test <- graph_from_adjacency_matrix(adjmatrix = matrix(1:9,3,3),
mode = 'directed',
weighted = TRUE,
diag = TRUE)
plot(test)
plot(test)
graph_attr(test,'weight')
graph_attr(test,'weight')
View(test)
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% Matrix::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% Matrix::summary() %>% as.data.frame()
symmetric_KNN_graph_object <- make_graph(t(symmetric_KNN_graph_sparse[,1:2]), directed = FALSE)
graph_attr(symmetric_KNN_graph_object,'weight') <- symmetric_KNN_graph_sparse[,3]
graph_attr(symmetric_KNN_graph_object,'weight')
plot(symmetric_KNN_graph_object)
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% Matrix::summary() %>% as.data.frame()
symmetric_KNN_graph_object <- make_graph(t(symmetric_KNN_graph_sparse[,1:2]), directed = TRUE)
graph_attr(symmetric_KNN_graph_object,'weight') <- symmetric_KNN_graph_sparse[,3]
plot(symmetric_KNN_graph_object)
symmetric_KNN_graph_sparse <- as(matrix(1:9,3,3), "dgCMatrix") %>% Matrix::summary() %>% as.data.frame()
symmetric_KNN_graph_object <- make_graph(t(symmetric_KNN_graph_sparse[,1:2]), directed = TRUE)
graph_attr(symmetric_KNN_graph_object,'weight') <- symmetric_KNN_graph_sparse[,3]
plot(symmetric_KNN_graph_object)
symmetric_KNN_graph_object <- graph_from_adjacency_matrix(adjmatrix = matrix(1:9,3,3),
mode = 'directed',
weighted = TRUE,
diag = TRUE)
graph_attr(symmetric_KNN_graph_object,'weighted')
test <- E(symmetric_KNN_graph_object)
test
names(test)
test
adjm <- matrix(sample(0:5, 100, replace=TRUE,
prob=c(0.9,0.02,0.02,0.02,0.02,0.02)), nc=10)
g2 <- graph_from_adjacency_matrix(adjm, weighted=TRUE)
graph_attr(g2,'weighted')
graph_attr(g2,'weight')
E(g2)$weight
test$weight
test
summary(test)
test$weight
?E()
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
MarkovHC_example1[["midResults"]][["symmetric_KNN_graph_object"]]
MarkovHC_example1$test <-1
View(MarkovHC_example1)
MarkovHC_example1$test
View(MarkovHC_example1)
levelindex <- level1
levelindex <- 'level1'
MarkovHC_example1$levelindex <-1
View(MarkovHC_example1)
View(MarkovHC_example1)
MarkovHC_example1 <- append(MarkovHC_example1$hierarchicalStructure, list(c(1,2,3)))
View(MarkovHC_example1)
View(MarkovHC_example1)
View(MarkovHC_example1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
View(MarkovHC_example1)
View(MarkovHC_example1)
MarkovHC_example1 <- append(MarkovHC_example1, list(1))
View(MarkovHC_example1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
View(MarkovHC_example1)
names(MarkovHC_example1$hierarchicalStructure[[1]])
names(MarkovHC_example1$hierarchicalStructure[1])
names(MarkovHC_example1$hierarchicalStructure[1]) <- 'level1'
names(MarkovHC_example1$hierarchicalStructure[1])
names(MarkovHC_example1$hierarchicalStructure[1])
View(MarkovHC_example1)
names(MarkovHC_example1$hierarchicalStructure)
names(MarkovHC_example1$inputParameters)
names(MarkovHC_example1$hierarchicalStructure) <- c('level1', 'level2', 'level3', 'level4')
names(MarkovHC_example1$hierarchicalStructure)
View(MarkovHC_example1)
rep('level', 2)
paste(rep('level', 2), 1:2)
paste(rep('level', 2), 1:2, sep = '')
length(MarkovHC_example1$hierarchicalStructure)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
View(MarkovHC_example1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
warnings()
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
library(MarkovHC)
library(MarkovHC)
1 < 2 < 3
order(c(3,2,4,5,1,2))
order(c(3,2,4,5,1,2), decreasing = T)
?order
c(3,2,4,5,1,2)[order(c(3,2,4,5,1,2), decreasing = T)]
1%in%c(1,2,3)
library(MarkovHC)
library(MarkovHC)
library(MarkovHC)
library(MarkovHC)
?subcomponent
library(MarkovHC)
example2D <- mvrnorm(n=100, mu=c(10,10), Sigma=matrix(c(10,9.5,9.5,10),2,2))%>%as.data.frame()
example2D <- rbind(example2D,
mvrnorm(n=100, mu=c(10,10), Sigma=matrix(c(10,-9.5,-9.5,10),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=200, mu=c(25,25), Sigma=matrix(c(5,0,0,5),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=500, mu=c(30,10), Sigma=matrix(c(3,0,0,0.5),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=500, mu=c(10,25), Sigma=matrix(c(3,0,0,3),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=300, mu=c(25,25), Sigma=matrix(c(1,0,0,1),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=300, mu=c(10,10), Sigma=matrix(c(1,0,0,1),2,2)))
example2D <- rbind(example2D,
cbind(runif(n= 50 ,min = -1, max = 36),runif(n= 50 ,min = 0, max = 36)))
example2D <- rbind(example2D,
cbind(runif(n= 30 ,min = 13, max = 21),runif(n= 30 ,min = 22, max = 27)))
library(MASS)
example2D <- mvrnorm(n=100, mu=c(10,10), Sigma=matrix(c(10,9.5,9.5,10),2,2))%>%as.data.frame()
example2D <- rbind(example2D,
mvrnorm(n=100, mu=c(10,10), Sigma=matrix(c(10,-9.5,-9.5,10),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=200, mu=c(25,25), Sigma=matrix(c(5,0,0,5),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=500, mu=c(30,10), Sigma=matrix(c(3,0,0,0.5),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=500, mu=c(10,25), Sigma=matrix(c(3,0,0,3),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=300, mu=c(25,25), Sigma=matrix(c(1,0,0,1),2,2)))
example2D <- rbind(example2D,
mvrnorm(n=300, mu=c(10,10), Sigma=matrix(c(1,0,0,1),2,2)))
example2D <- rbind(example2D,
cbind(runif(n= 50 ,min = -1, max = 36),runif(n= 50 ,min = 0, max = 36)))
example2D <- rbind(example2D,
cbind(runif(n= 30 ,min = 13, max = 21),runif(n= 30 ,min = 22, max = 27)))
plot(example2D)
usethis::use_data(example2D)
library(MarkovHC)
example3 <- mvrnorm(n=100, mu=c(10,10), Sigma=matrix(c(10,9.5,9.5,10),2,2))%>%as.data.frame()
example3 <- rbind(example3,
mvrnorm(n=100, mu=c(10,10), Sigma=matrix(c(10,-9.5,-9.5,10),2,2)))
example3 <- rbind(example3,
mvrnorm(n=200, mu=c(25,25), Sigma=matrix(c(5,0,0,5),2,2)))
example3 <- rbind(example3,
mvrnorm(n=500, mu=c(30,10), Sigma=matrix(c(3,0,0,0.5),2,2)))
example3 <- rbind(example3,
mvrnorm(n=500, mu=c(10,25), Sigma=matrix(c(3,0,0,3),2,2)))
example3 <- rbind(example3,
mvrnorm(n=300, mu=c(25,25), Sigma=matrix(c(1,0,0,1),2,2)))
example3 <- rbind(example3,
mvrnorm(n=300, mu=c(10,10), Sigma=matrix(c(1,0,0,1),2,2)))
example3 <- rbind(example3,
cbind(runif(n= 50 ,min = -1, max = 36),runif(n= 50 ,min = 0, max = 36)))
example3 <- rbind(example3,
cbind(runif(n= 30 ,min = 13, max = 21),runif(n= 30 ,min = 22, max = 27)))
plot(example3)
usethis::use_data(example3)
library(MarkovHC)
library(Rtsne)
library(ggplot2)
library(MarkovHC)
data <- read.csv(file = "F:/Projects/MarkovHC/data/GSE75748/GSE75748_sc_cell_type_ec.csv/GSE75748_sc_cell_type_ec.csv",
header = T,
row.names = 1)
dim(data)
data[1:3,1:3]
update_P = function(C_matrix_updated=NULL,
C_cut=NULL){
cutpoint <- quantile(C_matrix_updated[which(is.infinite(C_matrix_updated)==FALSE)],probs = C_cut)
p_updated <- C_matrix_updated
p_updated[which(C_matrix_updated>cutpoint)] <- 0
p_updated[which(C_matrix_updated<cutpoint)] <- 1
p_updated <- p_updated/rowSums(p_updated)
p_updated_indice <- p_updated
diag(p_updated_indice) <- 0
while((cutpoint==0)|(all(p_updated_indice==0))){
C_cut <- C_cut + 0.01
cutpoint <- quantile(C_matrix_updated[which(is.infinite(C_matrix_updated)==FALSE)],probs = C_cut)
p_updated <- C_matrix_updated
p_updated[which(C_matrix_updated>cutpoint)] <- 0
p_updated[which(C_matrix_updated<cutpoint)] <- 1
p_updated <- p_updated/rowSums(p_updated)
p_updated_indice <- p_updated
diag(p_updated_indice) <- 0
}
#print(C_matrix_updated)
#print(p_updated)
#print(paste('cutpoint is ', as.character(cutpoint),'.', sep = ''))
return(list(p_updated, cutpoint))
}
library(MarkovHC)
library(MarkovHC)
all(matrix(0,2,2)==0)
quantile(1:100, probs = 1.01)
library(MarkovHC)
library(MarkovHC)
library(MarkovHC)
