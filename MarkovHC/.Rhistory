color = "black",
face = "bold"),
legend.title = element_text(size=15,
family = "sans",
color = "black",
face = "bold"))
GO_upregulatedGenes.result <- as.data.frame(GO_upregulatedGenes@result)
GO_upregulatedGenes.result <- GO_upregulatedGenes.result[order(GO_upregulatedGenes.result[,9], decreasing = TRUE),]
head(GO_upregulatedGenes.result)
#差异基因的GO分析
upregulatedGenes <- (subset(ESCobject.markerstop50, ESCobject.markerstop50[,6]=="level17_basin4")%>%as.data.frame())[,7]
GO_upregulatedGenes <- enrichGO(gene = upregulatedGenes,
keyType = "SYMBOL",
OrgDb = 'org.Hs.eg.db',
ont = "BP",
pAdjustMethod = "fdr",
pvalueCutoff = 0.05,
qvalueCutoff  = 0.2,
minGSSize = 3,
maxGSSize = 500,
readable = FALSE)
enrichplot::dotplot(GO_upregulatedGenes,
x="count",
color="qvalue",
showCategory=30,
font.size=15,
title='')+scale_y_discrete(labels=function(x) str_wrap(x, width=40))+
theme(#panel.grid.major =element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1,
colour = "black"),
axis.title.x =element_text(size=15),
axis.text.x = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 0),
axis.text.y = element_text(size = 15,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 1),
axis.title.y=element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.text = element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=15,
family = "sans",
color = "black",
face = "bold"))
GO_upregulatedGenes.result <- as.data.frame(GO_upregulatedGenes@result)
GO_upregulatedGenes.result <- GO_upregulatedGenes.result[order(GO_upregulatedGenes.result[,9], decreasing = TRUE),]
head(GO_upregulatedGenes.result)
#差异基因的GO分析
upregulatedGenes <- (subset(ESCobject.markerstop50, ESCobject.markerstop50[,6]=="level17_basin2")%>%as.data.frame())[,7]
GO_upregulatedGenes <- enrichGO(gene = upregulatedGenes,
keyType = "SYMBOL",
OrgDb = 'org.Hs.eg.db',
ont = "BP",
pAdjustMethod = "fdr",
pvalueCutoff = 0.05,
qvalueCutoff  = 0.2,
minGSSize = 3,
maxGSSize = 500,
readable = FALSE)
enrichplot::dotplot(GO_upregulatedGenes,
x="count",
color="qvalue",
showCategory=30,
font.size=15,
title='')+scale_y_discrete(labels=function(x) str_wrap(x, width=40))+
theme(#panel.grid.major =element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1,
colour = "black"),
axis.title.x =element_text(size=15),
axis.text.x = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 0),
axis.text.y = element_text(size = 15,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 1),
axis.title.y=element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.text = element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=15,
family = "sans",
color = "black",
face = "bold"))
GO_upregulatedGenes.result <- as.data.frame(GO_upregulatedGenes@result)
GO_upregulatedGenes.result <- GO_upregulatedGenes.result[order(GO_upregulatedGenes.result[,9], decreasing = TRUE),]
head(GO_upregulatedGenes.result)
#差异基因的GO分析
upregulatedGenes <- (subset(ESCobject.markerstop50, ESCobject.markerstop50[,6]=="level17_basin6")%>%as.data.frame())[,7]
GO_upregulatedGenes <- enrichGO(gene = upregulatedGenes,
keyType = "SYMBOL",
OrgDb = 'org.Hs.eg.db',
ont = "BP",
pAdjustMethod = "fdr",
pvalueCutoff = 0.05,
qvalueCutoff  = 0.2,
minGSSize = 3,
maxGSSize = 500,
readable = FALSE)
enrichplot::dotplot(GO_upregulatedGenes,
x="count",
color="qvalue",
showCategory=30,
font.size=15,
title='')+scale_y_discrete(labels=function(x) str_wrap(x, width=40))+
theme(#panel.grid.major =element_blank(),
#panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1,
colour = "black"),
axis.title.x =element_text(size=15),
axis.text.x = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 0),
axis.text.y = element_text(size = 15,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 1),
axis.title.y=element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.text = element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=15,
family = "sans",
color = "black",
face = "bold"))
GO_upregulatedGenes.result <- as.data.frame(GO_upregulatedGenes@result)
GO_upregulatedGenes.result <- GO_upregulatedGenes.result[order(GO_upregulatedGenes.result[,9], decreasing = TRUE),]
head(GO_upregulatedGenes.result)
layout <- Embeddings(object = ESCobject, reduction = "pca")[,c(1,2)]%>%as.data.frame()
layout$basins <- sankeyResult_ESCobject[,4]
basin4 <- subset(layout, layout$basins=='level17_basin4')
basin2 <- subset(layout, layout$basins=='level17_basin2')
dim(basin2)
dim(basin4)
unique(setdiff(sankeyResult_ESCobject[,4], c('level17_basin4','level17_basin4'))))
unique(setdiff(sankeyResult_ESCobject[,4], c('level17_basin4','level17_basin4')))
layout <- subset(layout, layout$basins%in%(unique(setdiff(sankeyResult_ESCobject[,4], c('level17_basin4','level17_basin4')))))
ggplot(data=layout, mapping =  aes(x=PC_1, y=PC_2)) +
geom_point(size=2.5, shape=21, aes(fill=basins), color="#525252", alpha=0.7)+
xlim(min(layout$PC_1)-1,max(layout$PC_1)+1)+
ylim(min(layout$PC_2)-1,max(layout$PC_2)+1)+
theme(panel.grid.major =element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1,
colour = "black"),
axis.title.x =element_text(size=20),
axis.text.x = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 0),
axis.text.y = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 1),
axis.title.y=element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.text = element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=15,
family = "sans",
color = "black",
face = "bold"))+
xlab("x") + ylab("y")+
scale_fill_manual(
values = c("level17_basin1"="#fc8d62",
"level17_basin2"="#33a02c",
"level17_basin3"="#e31a1c",
"level17_basin4"="#ffd92f",
"level17_basin5"="#1f78b4",
"level17_basin6"="#a6cee3",
"level17_basin7"="#a6d854",
"level17_basin8"="#66c2a5",
"level17_basin9"="#bf5b17",
"level17_basin10"="#e78ac3"),
breaks = c("level17_basin8",
"level17_basin1",
"level17_basin10",
"level17_basin9",
"level17_basin3",
"level17_basin4",
"level17_basin2",
"level17_basin7",
"level17_basin6",
"level17_basin5"))
layout <- subset(layout, layout$basins%in%(unique(setdiff(sankeyResult_ESCobject[,4], c('level17_basin2','level17_basin4')))))
ggplot(data=layout, mapping =  aes(x=PC_1, y=PC_2)) +
geom_point(size=2.5, shape=21, aes(fill=basins), color="#525252", alpha=0.7)+
xlim(min(layout$PC_1)-1,max(layout$PC_1)+1)+
ylim(min(layout$PC_2)-1,max(layout$PC_2)+1)+
theme(panel.grid.major =element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1,
colour = "black"),
axis.title.x =element_text(size=20),
axis.text.x = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 0),
axis.text.y = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 1),
axis.title.y=element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.text = element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=15,
family = "sans",
color = "black",
face = "bold"))+
xlab("x") + ylab("y")+
scale_fill_manual(
values = c("level17_basin1"="#fc8d62",
"level17_basin2"="#33a02c",
"level17_basin3"="#e31a1c",
"level17_basin4"="#ffd92f",
"level17_basin5"="#1f78b4",
"level17_basin6"="#a6cee3",
"level17_basin7"="#a6d854",
"level17_basin8"="#66c2a5",
"level17_basin9"="#bf5b17",
"level17_basin10"="#e78ac3"),
breaks = c("level17_basin8",
"level17_basin1",
"level17_basin10",
"level17_basin9",
"level17_basin3",
"level17_basin4",
"level17_basin2",
"level17_basin7",
"level17_basin6",
"level17_basin5"))
ggplot(data=layout, mapping =  aes(x=PC_1, y=PC_2)) +
geom_point(size=2.5, shape=21, aes(fill=basins), color="#525252", alpha=0.7)+
geom_point(data=basin4,size=2.5, shape=21, aes(x=PC_1, y=PC_2, fill=basins), color="#525252", alpha=1)+
geom_point(data=basin2,size=2.5, shape=21, aes(x=PC_1, y=PC_2, fill=basins), color="#525252", alpha=1)+
xlim(min(layout$PC_1)-1,max(layout$PC_1)+1)+
ylim(min(layout$PC_2)-1,max(layout$PC_2)+1)+
theme(panel.grid.major =element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1,
colour = "black"),
axis.title.x =element_text(size=20),
axis.text.x = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 0),
axis.text.y = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 1),
axis.title.y=element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.text = element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=15,
family = "sans",
color = "black",
face = "bold"))+
xlab("x") + ylab("y")+
scale_fill_manual(
values = c("level17_basin1"="#fc8d62",
"level17_basin2"="#33a02c",
"level17_basin3"="#e31a1c",
"level17_basin4"="#ffd92f",
"level17_basin5"="#1f78b4",
"level17_basin6"="#a6cee3",
"level17_basin7"="#a6d854",
"level17_basin8"="#66c2a5",
"level17_basin9"="#bf5b17",
"level17_basin10"="#e78ac3"),
breaks = c("level17_basin8",
"level17_basin1",
"level17_basin10",
"level17_basin9",
"level17_basin3",
"level17_basin4",
"level17_basin2",
"level17_basin7",
"level17_basin6",
"level17_basin5"))
png(filename = 'F:/Projects/MarkovHC/Figures/Figure3.B.png', width = 550, height = 500)
ggplot(data=layout, mapping =  aes(x=PC_1, y=PC_2)) +
geom_point(size=2.5, shape=21, aes(fill=basins), color="#525252", alpha=0.7)+
geom_point(data=basin4,size=2.5, shape=21, aes(x=PC_1, y=PC_2, fill=basins), color="#525252", alpha=1)+
geom_point(data=basin2,size=2.5, shape=21, aes(x=PC_1, y=PC_2, fill=basins), color="#525252", alpha=1)+
xlim(min(layout$PC_1)-1,max(layout$PC_1)+1)+
ylim(min(layout$PC_2)-1,max(layout$PC_2)+1)+
theme(panel.grid.major =element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(size = 1,
colour = "black"),
axis.title.x =element_text(size=20),
axis.text.x = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 0),
axis.text.y = element_text(size = 20,
family = "sans",
color = "black",
face = "bold",
vjust = 0,
hjust = 1),
axis.title.y=element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.text = element_text(size=15,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=15,
family = "sans",
color = "black",
face = "bold"))+
xlab("x") + ylab("y")+
scale_fill_manual(
values = c("level17_basin1"="#fc8d62",
"level17_basin2"="#33a02c",
"level17_basin3"="#e31a1c",
"level17_basin4"="#ffd92f",
"level17_basin5"="#1f78b4",
"level17_basin6"="#a6cee3",
"level17_basin7"="#a6d854",
"level17_basin8"="#66c2a5",
"level17_basin9"="#bf5b17",
"level17_basin10"="#e78ac3"),
breaks = c("level17_basin8",
"level17_basin1",
"level17_basin10",
"level17_basin9",
"level17_basin3",
"level17_basin4",
"level17_basin2",
"level17_basin7",
"level17_basin6",
"level17_basin5"))
dev.off()
save.image('F:/Projects/MarkovHC/results/ESCDevelopment/ESCDevelopment.RData')
load('F:/Projects/MarkovHC/results/ESCDevelopment/ESCDevelopment.RData')
head(ESCobject.markerstop50)
test <- ESCobject.markerstop50
test <- test[order(factor(test$cluster, levels = c("level17_basin8",
"level17_basin1",
"level17_basin10",
"level17_basin9",
"level17_basin3",
"level17_basin4",
"level17_basin2",
"level17_basin7",
"level17_basin6",
"level17_basin5"))),]
head(test)
tail(test)
ESCobject.markerstop50 <- ESCobject.markerstop50[order(factor(ESCobject.markerstop50$cluster, levels = c("level17_basin8",
"level17_basin1",
"level17_basin10",
"level17_basin9",
"level17_basin3",
"level17_basin4",
"level17_basin2",
"level17_basin7",
"level17_basin6",
"level17_basin5"))),]
ordergenes_expression_matrix <- subset(ordergenes_expression_matrix, rownames(ordergenes_expression_matrix)%in%ESCobject.markerstop50$gene)
ordergenes_expression_matrix <- GetAssayData(object = ESCobject, slot = "scale.data")
ordergenes_expression_matrix <- subset(ordergenes_expression_matrix, rownames(ordergenes_expression_matrix)%in%ESCobject.markerstop50$gene)
ordergenes_expression_matrix <- ordergenes_expression_matrix[order(factor(rownames(ordergenes_expression_matrix), levels = unique(ESCobject.markerstop50$gene))),]
celltypecahracter <- as.character(ESCobject@meta.data[,5])
for (i in 1:length(celltypecahracter)) {
celltypecahracter[i] <- str_replace_all(celltypecahracter[i], " ", "_")
}
annotation_col_C_andcluster = data.frame(CellType=factor(celltypecahracter),
Basins=factor(sankeyResult_ESCobject[,4]))
rownames(annotation_col_C_andcluster) = colnames(ordergenes_expression_matrix)
ann_colors_C = list(
CellType =  c( E3="#66c2a5",
E4="#fc8d62",
E4_late="#8da0cb",
E5_early="#e78ac3",
E5="#a6d854",
E6="#ffd92f",
E7="#1f78b4"),
Basins = c(level17_basin1="#fc8d62",
level17_basin2="#33a02c",
level17_basin3="#e31a1c",
level17_basin4="#ffd92f",
level17_basin5="#1f78b4",
level17_basin6="#a6cee3",
level17_basin7="#a6d854",
level17_basin8="#66c2a5",
level17_basin9="#bf5b17",
level17_basin10="#e78ac3"))
unique_combine_basin <- c("level17_basin8",
"level17_basin1",
"level17_basin10",
"level17_basin9",
"level17_basin3",
"level17_basin4",
"level17_basin2",
"level17_basin7",
"level17_basin6",
"level17_basin5")
ordergenes_expression_matrix <- t(ordergenes_expression_matrix)
ordered_genes_expression_matrix <- subset(ordergenes_expression_matrix, sankeyResult_ESCobject[,4]%in%unique_combine_basin[1])
for (i in 2:length(unique_combine_basin)) {
subcluster <- subset(ordergenes_expression_matrix, sankeyResult_ESCobject[,4]%in%unique_combine_basin[i])
ordered_genes_expression_matrix <- rbind(ordered_genes_expression_matrix, subcluster)
}
ordered_genes_expression_matrix <- t(ordered_genes_expression_matrix)
ordered_genes_expression_matrix_copy <- ordered_genes_expression_matrix
pheatmap(as.matrix(ordered_genes_expression_matrix), cluster_rows = F, cluster_cols =F,
scale = "row" ,
legend_breaks= ceiling(seq(min(ordered_genes_expression_matrix),
max(ordered_genes_expression_matrix)-4,0.01)),
color = colorRampPalette(colors = c("turquoise1","black","gold"))(length(seq(min(ordered_genes_expression_matrix),max(ordered_genes_expression_matrix)-4,0.01))),
breaks= seq(min(ordered_genes_expression_matrix),
max(ordered_genes_expression_matrix)-4,
by=0.01),
show_colnames = F, show_rownames = F,
annotation_col  = annotation_col_C_andcluster,
annotation_colors = ann_colors_C,
fontsize =15)
pheatmap(as.matrix(ordered_genes_expression_matrix), cluster_rows = F, cluster_cols =F,
scale = "row" ,
legend_breaks= ceiling(seq(min(ordered_genes_expression_matrix),
max(ordered_genes_expression_matrix)-4,0.01)),
color = colorRampPalette(colors = c("turquoise1","black","gold"))(length(seq(min(ordered_genes_expression_matrix),max(ordered_genes_expression_matrix)-4,0.01))),
breaks= seq(min(ordered_genes_expression_matrix),
max(ordered_genes_expression_matrix)-4,
by=0.01),
show_colnames = F, show_rownames = F,
annotation_col  = annotation_col_C_andcluster,
annotation_colors = ann_colors_C,
fontsize =15)
pheatmap(as.matrix(ordered_genes_expression_matrix), cluster_rows = F, cluster_cols =F,
scale = "row" ,
legend_breaks= ceiling(seq(min(ordered_genes_expression_matrix),
max(ordered_genes_expression_matrix)-4,0.01)),
color = colorRampPalette(colors = c("turquoise1","black","gold"))(length(seq(min(ordered_genes_expression_matrix),max(ordered_genes_expression_matrix)-4,0.01))),
breaks= seq(min(ordered_genes_expression_matrix),
max(ordered_genes_expression_matrix)-4,
by=0.01),
show_colnames = F, show_rownames = F,
annotation_col  = annotation_col_C_andcluster,
annotation_colors = ann_colors_C,
fontsize =15)
save.image('F:/Projects/MarkovHC/results/ESCDevelopment/ESCDevelopment.RData')
