for(clusterindex in 1:length(unique_clusters)){
temp_index <- which(hresult_cut==clusterindex)
if(length(temp_index)==1){
symmetric_KNN_graph_merged[clusterindex,] <- symmetric_KNN_graph[temp_index, ]
}else{
temp_cluster <- symmetric_KNN_graph[temp_index, ]
symmetric_KNN_graph_merged[clusterindex,] <- apply(temp_cluster, 2, max)
}
}
#merge columns
#each elements in symmetric_KNN_graph_cluster is the similarity bwt clusters and clusters
symmetric_KNN_graph_cluster <- matrix(0,nrow(symmetric_KNN_graph_merged),nrow(symmetric_KNN_graph_merged))
for(clusterindex in 1:length(unique_clusters)){
for(clusterindex2 in 1:length(unique_clusters)){
temp_cluster <- symmetric_KNN_graph_merged[clusterindex, which(hresult_cut==clusterindex2)]
symmetric_KNN_graph_cluster[clusterindex, clusterindex2] <- max(temp_cluster)
}
}
diag(symmetric_KNN_graph_cluster) <- min(symmetric_KNN_graph_cluster)
#calculate the centrality_scores of clusters
centrality_scores_cluster <- integer(length = length(unique_clusters))
for (score_index in 1:length(unique_clusters)) {
centrality_scores_tpm <- centrality_scores[which(hresult_cut==score_index)]
centrality_scores_cluster[score_index] <- mean(centrality_scores_tpm)
}
## Main part of MarkovHC algorithm
##step04. Calculate the transition probability matrix and the pseudo energy matrix
#step04.1 Calculate the transition probability matrix
transitionMatrix<-transition_probability(matrix=symmetric_KNN_graph_cluster,
densevector=centrality_scores_cluster,
weightDist=weightDist,
weightDens=weightDens)
#step04.2 Calculate the pseudo energy matrix
C_matrix <- Calculate_C_Matrix(matrix=symmetric_KNN_graph_cluster,
densevector=centrality_scores_cluster,
emphasizedistance=emphasizedistance,
weightDist=weightDist,
weightDens=weightDens)
C_matrix <- C_matrix + 0.1
C_matrix[which(C_matrix==Inf)] <- 0
C_matrix_graph_sparse <- as(as.matrix(C_matrix), "dgCMatrix")%>%summary()%>%as.data.frame()
C_matrix_graph_object <- make_graph(t(C_matrix_graph_sparse[,1:2]), directed = TRUE)
graph_attr(C_matrix_graph_object,'weight') <- C_matrix_graph_sparse[,3]
##step05. Build the hierarchical structure-----------------------------------
P_updated <- transitionMatrix
MarkovHC_result <- list()
#Store the result of base clustering
attractors <- list()
basins <- list()
attractorPoints <- list()
basinPoints <- list()
for (i in 1:length(unique_clusters)) {
attractors <- c(attractors, list(i))
basins <- c(basins, list(i))
clusterPoints <- which(hresult_cut==i)
attractorPoints <- c(attractorPoints, list(clusterPoints))
basinPoints <- c(basinPoints, list(clusterPoints))
}
basinNum <- length(attractors)
level_result <- list(basins=basins,
attractors=attractors,
basinPoints=basinPoints,
attractorPoints=attractorPoints,
basinNum=basinNum)
MarkovHC_result <- c(MarkovHC_result, level_result)
levels_indice <- 1
while (TRUE) {
print(paste('Build the level ',as.character(levels_indice),'...', sep = ''))
##step05.1 find basins and attractors
RS_vector <- judge_RS(P=P_updated)
##step05.2 constructe the list to store the result of this level
attractors <- list()
basins <- list()
attractorPoints <- list()
basinPoints <- list()
##step05.3 partition the state space
processed_attractors <- integer(length = length(RS_vector))
processed_attractors[which(RS_vector==0)] <- 1
attractor_indice <- 1
while(TRUE){
if(all(processed_attractors==1)){break}
print(paste('Find attractors in the basin ',as.character(attractor_indice),'.', sep = ''))
attractor_temp <- which(processed_attractors==0)[1]
processed_attractors[attractor_temp] <- 1
P_updated_graph_sparse <- as(as.matrix(P_updated), "dgCMatrix")%>%summary()%>%as.data.frame()
P_updated_graph_object <- make_graph(t(P_updated_graph_sparse[,1:2]), directed = TRUE)
graph_attr(P_updated_graph_object,'weight') <- P_updated_graph_sparse[,3]
attractor_temp_access <- all_simple_paths(graph = P_updated_graph_object, from = attractor_temp,
mode = 'out')%>%unlist()%>%unique()
processed_attractors[attractor_temp_access] <- 1
attractors <- c(attractors, list(unique(c(attractor_temp_access, attractor_temp))))
basins_temp_merged <- c()
for (i in unique(c(attractor_temp_access, attractor_temp))) {
basins_temp <- all_simple_paths(graph = P_updated_graph_object, from = i,
mode = 'in')%>%unlist()%>%unique()
basins_temp_merged <- c(basins_temp_merged, basins_temp)
}
basins <- c(basins, list(unique(basins_temp_merged)))
attractor_indice <- attractor_indice+1
}
##step05.4 assign the points to basins and attractors
basinNum <- length(basins)
basin_indice <- 1
for (i in 1:basinNum){
print(paste('Partition the basin',as.character(basin_indice),'.', sep = ''))
#assign attractor points
attractorPoints_temp <- level_result$attractorPoints[attractors[[i]]]%>%unlist()%>%unique()
attractorPoints <- c(attractorPoints, list(attractorPoints_temp))
#assign basin points
basinPoints_temp <- level_result$basinPoints[basins[[i]]]%>%unlist()%>%unique()
basinPoints <- c(basinPoints, list(basinPoints_temp))
basin_indice <- basin_indice+1
}
##step05.5 update the pseudo energy matrix
C_matrix_updated <- matrix(data = 0, nrow = basinNum, ncol = basinNum)
for (i in 1:basinNum) {
for (j in 1:basinNum) {
if(i==j){next}
C_matrix_updated[i,j] <- distances(graph = C_matrix_graph_object,
v = attractors[[i]],
to = basins[[j]],
mode = 'out',
weights = graph_attr(C_matrix_graph_object,'weight'),
algorithm = "dijkstra")%>%min()
}
}
##step05.6 constructe the list to store the result of MarkovHC algorithm
level_result <- list(basins=basins,
attractors=attractors,
basinPoints=basinPoints,
attractorPoints=attractorPoints,
basinNum=basinNum)
MarkovHC_result <- c(MarkovHC_result, level_result)
if(basinNum==1){
##step06. Output the results---------------------------------------------
#The input parameters
inputParameters <- list(
minrt=minrt,
transformtype=transformtype,
KNN=KNN,
basecluster=basecluster,
dobasecluster=dobasecluster,
baseclusternum=baseclusternum,
emphasizedistance=emphasizedistance,
weightDist=weightDist,
weightDens=weightDens,
cutpoint=cutpoint,
showprocess=showprocess,
bn=bn,
stop_rate=stop_rate
)
#The results among the process
midResults <- list(
symmetric_KNN_graph_object = symmetric_KNN_graph_object,
centrality_scores = centrality_scores,
symmetric_KNN_graph_cluster = symmetric_KNN_graph_cluster,
centrality_scores_cluster = centrality_scores_cluster,
transitionMatrix = transitionMatrix
)
#The MarkovHC object
MarkovHC_object <- list(
hierarchicalStructure = MarkovHC_result,
inputParameters = inputParameters,
midResults = midResults
)
stopCluster(cl)
return(MarkovHC_object)
}
##step07.1 update the transition probability matrix
P_updated <- update_P(C_matrix_updated=C_matrix_updated, C_cut=cutpoint)
levels_indice <- levels_indice + 1
}
}
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
Matrix(matrix(1:9,3,3), sparse = TRUE)
as(matrix(1:9,3,3), "dgCMatrix")
as(matrix(1:9,3,3), "dgCMatrix") %>% summary() %>% as.data.frame()
as(matrix(1:9,3,3), "dgCMatrix") %>% summary()
as(matrix(1:9,3,3), "dgCMatrix") %>% summary() %>% as.data.frame()
class(as(matrix(1:9,3,3), "dgCMatrix"))
remove.packages(MarkovHC)
remove.packages('MarkovHC')
library(MarkovHC)
library(MarkovHC)
install.packages("F:/Github/MarkovHC/MarkovHC_1.0.0.zip", repos = NULL, type = "win.binary")
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
?summary()
library(Matrix)
?summary()
?Summary
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
?Matrix::summary
??summary
test <- graph_from_adjacency_matrix(adjmatrix = matrix(1:9,3,3),
mode = 'directed',
weighted = TRUE,
diag = TRUE)
plot(test)
plot(test)
graph_attr(test,'weight')
graph_attr(test,'weight')
View(test)
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% Matrix::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% base::summary() %>% as.data.frame()
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% Matrix::summary() %>% as.data.frame()
symmetric_KNN_graph_object <- make_graph(t(symmetric_KNN_graph_sparse[,1:2]), directed = FALSE)
graph_attr(symmetric_KNN_graph_object,'weight') <- symmetric_KNN_graph_sparse[,3]
graph_attr(symmetric_KNN_graph_object,'weight')
plot(symmetric_KNN_graph_object)
symmetric_KNN_graph_sparse <- as(matrix(3,3), "dgCMatrix") %>% Matrix::summary() %>% as.data.frame()
symmetric_KNN_graph_object <- make_graph(t(symmetric_KNN_graph_sparse[,1:2]), directed = TRUE)
graph_attr(symmetric_KNN_graph_object,'weight') <- symmetric_KNN_graph_sparse[,3]
plot(symmetric_KNN_graph_object)
symmetric_KNN_graph_sparse <- as(matrix(1:9,3,3), "dgCMatrix") %>% Matrix::summary() %>% as.data.frame()
symmetric_KNN_graph_object <- make_graph(t(symmetric_KNN_graph_sparse[,1:2]), directed = TRUE)
graph_attr(symmetric_KNN_graph_object,'weight') <- symmetric_KNN_graph_sparse[,3]
plot(symmetric_KNN_graph_object)
symmetric_KNN_graph_object <- graph_from_adjacency_matrix(adjmatrix = matrix(1:9,3,3),
mode = 'directed',
weighted = TRUE,
diag = TRUE)
graph_attr(symmetric_KNN_graph_object,'weighted')
test <- E(symmetric_KNN_graph_object)
test
names(test)
test
adjm <- matrix(sample(0:5, 100, replace=TRUE,
prob=c(0.9,0.02,0.02,0.02,0.02,0.02)), nc=10)
g2 <- graph_from_adjacency_matrix(adjm, weighted=TRUE)
graph_attr(g2,'weighted')
graph_attr(g2,'weight')
E(g2)$weight
test$weight
test
summary(test)
test$weight
?E()
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
MarkovHC_example1[["midResults"]][["symmetric_KNN_graph_object"]]
MarkovHC_example1$test <-1
View(MarkovHC_example1)
MarkovHC_example1$test
View(MarkovHC_example1)
levelindex <- level1
levelindex <- 'level1'
MarkovHC_example1$levelindex <-1
View(MarkovHC_example1)
View(MarkovHC_example1)
MarkovHC_example1 <- append(MarkovHC_example1$hierarchicalStructure, list(c(1,2,3)))
View(MarkovHC_example1)
View(MarkovHC_example1)
View(MarkovHC_example1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
View(MarkovHC_example1)
View(MarkovHC_example1)
MarkovHC_example1 <- append(MarkovHC_example1, list(1))
View(MarkovHC_example1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
View(MarkovHC_example1)
names(MarkovHC_example1$hierarchicalStructure[[1]])
names(MarkovHC_example1$hierarchicalStructure[1])
names(MarkovHC_example1$hierarchicalStructure[1]) <- 'level1'
names(MarkovHC_example1$hierarchicalStructure[1])
names(MarkovHC_example1$hierarchicalStructure[1])
View(MarkovHC_example1)
names(MarkovHC_example1$hierarchicalStructure)
names(MarkovHC_example1$inputParameters)
names(MarkovHC_example1$hierarchicalStructure) <- c('level1', 'level2', 'level3', 'level4')
names(MarkovHC_example1$hierarchicalStructure)
View(MarkovHC_example1)
rep('level', 2)
paste(rep('level', 2), 1:2)
paste(rep('level', 2), 1:2, sep = '')
length(MarkovHC_example1$hierarchicalStructure)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
View(MarkovHC_example1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
View(MarkovHC_example1)
warnings()
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
library(MarkovHC)
library(MarkovHC)
data("example1")
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
MarkovHC_example1 <- MarkovHC(origin_matrix=t(example1),
minrt=50,
transformtype="none",
KNN=20,
basecluster="louvain",
dobasecluster=TRUE,
baseclusternum=NULL,
emphasizedistance=1,
weightDist=2,
weightDens=0.5,
cutpoint=0.05,
showprocess=FALSE,
bn=2,
stop_rate=1)
