#"level22_basin4"="#92c5de",
#"level22_basin5"="#92c5de",
"level24"="#f4a582",
#"level24_basin2"="#f4a582",
#"level24_basin3"="#f4a582",
"level23_basin1"="#377eb8",
"level23_basin2"="#4daf4a",
"level23_basin3"="#984ea3",
"level23_basin4"="#ff7f00"
))+
geom_node_text(aes(label = basin), size = 10,
family = "sans",
color = "black",
fontface = "bold") +
xlim(1-0.2,5+0.2) +
ylim(1-0.2,2+0.2) +
# Adjust the scales
scale_size(range = c(10, 35)) +
scale_edge_colour_gradientn(colours = viridis(100)) +
# Add legend labels
guides(size = guide_legend(title = "basin size", title.position = "top"),
colour = guide_legend(title = "basin colors",
title.position = "top"),
edge_colour = guide_edge_colorbar(title = "cell count (log)",
title.position = "top"),
edge_alpha = guide_legend(title = "basin prop",
title.position = "top", nrow = 2)) +
# Remove the axes as they don't really mean anything
theme_void() +
theme(legend.position = "right",
legend.text = element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=25,
family = "sans",
color = "black",
face = "bold")
)
pdf(file= 'F:/Projects/MarkovHC/Figures/Figure1.D.treePlot.pdf', width = 10, height = 10)
print(treeplot)
dev.off()
ggraph(graph, layout = "manual",
node.positions=nodesPosition, circular = FALSE) +
# Plot the edges, colour is the number of cells and transparency is the
# proportion contribution to the new cluster
geom_edge_link(arrow = arrow(length = unit(7, 'mm')),
end_cap = circle(10, "mm"),
edge_width = 2,
aes(colour = log(TransCount), alpha = TransPropTo)) +
# Plot the nodes, size is the number of cells
geom_node_point(aes(colour = factor(nodes$labels),
size = Size)) +
scale_color_manual(
values = c(
"level22"="#92c5de",
#"level22_basin2"="#92c5de",
#"level22_basin3"="#92c5de",
#"level22_basin4"="#92c5de",
#"level22_basin5"="#92c5de",
"level24"="#f4a582",
#"level24_basin2"="#f4a582",
#"level24_basin3"="#f4a582",
"level23_basin1"="#377eb8",
"level23_basin2"="#4daf4a",
"level23_basin3"="#984ea3",
"level23_basin4"="#ff7f00"
))+
geom_node_text(aes(label = basin), size = 10,
family = "sans",
color = "black",
fontface = "bold") +
xlim(1-0.2,5+0.2) +
ylim(1-0.2,2+0.2) +
# Adjust the scales
scale_size(range = c(10, 35)) +
scale_edge_colour_gradientn(colours = viridis(100)) +
# Add legend labels
guides(size = guide_legend(title = "basin size", title.position = "top"),
colour = guide_legend(title = "basin colors",
title.position = "top"),
edge_colour = guide_edge_colorbar(title = "cell count (log)",
title.position = "top"),
edge_alpha = guide_legend(title = "basin prop",
title.position = "top", nrow = 2)) +
# Remove the axes as they don't really mean anything
theme_void() +
theme(legend.position = "right",
legend.text = element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=25,
family = "sans",
color = "black",
face = "bold")
)
?guides
ggraph(graph, layout = "manual",
node.positions=nodesPosition, circular = FALSE) +
# Plot the edges, colour is the number of cells and transparency is the
# proportion contribution to the new cluster
geom_edge_link(arrow = arrow(length = unit(7, 'mm')),
end_cap = circle(10, "mm"),
edge_width = 2,
aes(colour = log(TransCount), alpha = TransPropTo)) +
# Plot the nodes, size is the number of cells
geom_node_point(aes(colour = factor(nodes$labels),
size = Size)) +
scale_color_manual(
values = c(
"level22"="#92c5de",
#"level22_basin2"="#92c5de",
#"level22_basin3"="#92c5de",
#"level22_basin4"="#92c5de",
#"level22_basin5"="#92c5de",
"level24"="#f4a582",
#"level24_basin2"="#f4a582",
#"level24_basin3"="#f4a582",
"level23_basin1"="#377eb8",
"level23_basin2"="#4daf4a",
"level23_basin3"="#984ea3",
"level23_basin4"="#ff7f00"
))+
geom_node_text(aes(label = basin), size = 10,
family = "sans",
color = "black",
fontface = "bold") +
xlim(1-0.2,5+0.2) +
ylim(1-0.2,2+0.2) +
# Adjust the scales
scale_size(range = c(10, 35)) +
scale_edge_colour_gradientn(colours = viridis(100)) +
# Add legend labels
guides(
colour = guide_legend(title = "basin colors",
title.position = "top"),
size = guide_legend(title = "basin size", title.position = "top"),
edge_colour = guide_edge_colorbar(title = "cell count (log)",
title.position = "top"),
edge_alpha = guide_legend(title = "basin prop",
title.position = "top", nrow = 2)) +
# Remove the axes as they don't really mean anything
theme_void() +
theme(legend.position = "right",
legend.text = element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=25,
family = "sans",
color = "black",
face = "bold")
)
data.frame(cbind(c(1,4,5,2,3,
1,4,5,2,
1.5,4,5),
c(1,1,1,1,1,
1.5,1.5,1.5,1.5,
2,2,2)))
colnames(nodesPosition) <- c('x','y')
treeplot <- ggraph(graph, layout = "manual",
node.positions=nodesPosition, circular = FALSE) +
# Plot the edges, colour is the number of cells and transparency is the
# proportion contribution to the new cluster
geom_edge_link(arrow = arrow(length = unit(7, 'mm')),
end_cap = circle(10, "mm"),
edge_width = 2,
aes(colour = log(TransCount), alpha = TransPropTo)) +
# Plot the nodes, size is the number of cells
geom_node_point(aes(colour = factor(nodes$labels),
size = Size)) +
scale_color_manual(
values = c(
"level22"="#92c5de",
#"level22_basin2"="#92c5de",
#"level22_basin3"="#92c5de",
#"level22_basin4"="#92c5de",
#"level22_basin5"="#92c5de",
"level24"="#f4a582",
#"level24_basin2"="#f4a582",
#"level24_basin3"="#f4a582",
"level23_basin1"="#377eb8",
"level23_basin2"="#4daf4a",
"level23_basin3"="#984ea3",
"level23_basin4"="#ff7f00"
))+
geom_node_text(aes(label = basin), size = 10,
family = "sans",
color = "black",
fontface = "bold") +
xlim(1-0.2,5+0.2) +
ylim(1-0.2,2+0.2) +
# Adjust the scales
scale_size(range = c(10, 35)) +
scale_edge_colour_gradientn(colours = viridis(100)) +
# Add legend labels
guides(
colour = guide_legend(title = "basin colors",
title.position = "top"),
size = guide_legend(title = "basin size", title.position = "top"),
edge_alpha = guide_legend(title = "basin prop",
title.position = "top", nrow = 2),
edge_colour = guide_edge_colorbar(title = "cell count (log)",
title.position = "top")) +
# Remove the axes as they don't really mean anything
theme_void() +
theme(legend.position = "right",
legend.text = element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=25,
family = "sans",
color = "black",
face = "bold")
)
treeplot <- ggraph(graph, layout = "manual",
node.positions=nodesPosition, circular = FALSE) +
# Plot the edges, colour is the number of cells and transparency is the
# proportion contribution to the new cluster
geom_edge_link(arrow = arrow(length = unit(7, 'mm')),
end_cap = circle(10, "mm"),
edge_width = 2,
aes(colour = log(TransCount), alpha = TransPropTo)) +
# Plot the nodes, size is the number of cells
geom_node_point(aes(colour = factor(nodes$labels),
size = Size)) +
scale_color_manual(
values = c(
"level22"="#92c5de",
#"level22_basin2"="#92c5de",
#"level22_basin3"="#92c5de",
#"level22_basin4"="#92c5de",
#"level22_basin5"="#92c5de",
"level24"="#f4a582",
#"level24_basin2"="#f4a582",
#"level24_basin3"="#f4a582",
"level23_basin1"="#377eb8",
"level23_basin2"="#4daf4a",
"level23_basin3"="#984ea3",
"level23_basin4"="#ff7f00"
))+
geom_node_text(aes(label = basin), size = 10,
family = "sans",
color = "black",
fontface = "bold") +
xlim(1-0.2,5+0.2) +
ylim(1-0.2,2+0.2) +
# Adjust the scales
scale_size(range = c(10, 35)) +
scale_edge_colour_gradientn(colours = viridis(100)) +
# Add legend labels
guides(colour = guide_legend(title = "basin colors",
title.position = "top", order = 1),
size = guide_legend(title = "basin size", title.position = "top", order = 2),
edge_alpha = guide_legend(title = "basin prop",
title.position = "top", nrow = 2, order = 4),
edge_colour = guide_edge_colorbar(title = "cell count (log)",
title.position = "top", order = 3)) +
# Remove the axes as they don't really mean anything
theme_void() +
theme(legend.position = "right",
legend.text = element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=25,
family = "sans",
color = "black",
face = "bold")
)
pdf(file= 'F:/Projects/MarkovHC/Figures/Figure1.D.treePlot.pdf', width = 10, height = 10)
print(treeplot)
dev.off()
ggraph(graph, layout = "manual",
node.positions=nodesPosition, circular = FALSE) +
# Plot the edges, colour is the number of cells and transparency is the
# proportion contribution to the new cluster
geom_edge_link(arrow = arrow(length = unit(7, 'mm')),
end_cap = circle(10, "mm"),
edge_width = 2,
aes(colour = log(TransCount), alpha = TransPropTo)) +
# Plot the nodes, size is the number of cells
geom_node_point(aes(colour = factor(nodes$labels),
size = Size)) +
scale_color_manual(
values = c(
"level22"="#92c5de",
#"level22_basin2"="#92c5de",
#"level22_basin3"="#92c5de",
#"level22_basin4"="#92c5de",
#"level22_basin5"="#92c5de",
"level24"="#f4a582",
#"level24_basin2"="#f4a582",
#"level24_basin3"="#f4a582",
"level23_basin1"="#377eb8",
"level23_basin2"="#4daf4a",
"level23_basin3"="#984ea3",
"level23_basin4"="#ff7f00"
))+
geom_node_text(aes(label = basin), size = 10,
family = "sans",
color = "black",
fontface = "bold") +
xlim(1-0.2,5+0.2) +
ylim(1-0.2,2+0.2) +
# Adjust the scales
scale_size(range = c(10, 35)) +
scale_edge_colour_gradientn(colours = viridis(100)) +
# Add legend labels
guides(colour = guide_legend(title = "basin colors",
title.position = "top", order = 1),
size = guide_legend(title = "basin size", title.position = "top", order = 2),
edge_alpha = guide_legend(title = "basin prop",
title.position = "top", nrow = 2, order = 4),
edge_colour = guide_edge_colorbar(title = "cell count (log)",
title.position = "top", order = 3)) +
# Remove the axes as they don't really mean anything
theme_void() +
theme(legend.position = "right",
legend.text = element_text(size=20,
family = "sans",
color = "black",
face = "bold"),
legend.title = element_text(size=25,
family = "sans",
color = "black",
face = "bold")
)
save.image("F:/Projects/MarkovHC/results/simulationData/example3.RData")
library(MarkovHC)
library(MarkovHC)
getNodes()
?n()
load("F:/Projects/MarkovHC/results/simulationData/example3.RData")
View(clusterings)
nodes <- clusterings %>%
tidyr::gather(key = level, value = basin)
View(nodes)
nodes <- clusterings %>%
tidyr::gather(key = level, value = basin) %>%
group_by(level, basin)
View(nodes)
nodes <- clusterings %>%
tidyr::gather(key = level, value = basin)
nodes <- clusterings %>%
tidyr::gather(key = level, value = basin) %>%
group_by(level, basin) %>%
summarise(Size = n())
View(nodes)
View(nodes)
?group_by
nodes <- clusterings %>%
tidyr::gather(key = level, value = basin) %>%
group_by(level, basin) %>%
summarise(Size = n()) %>%
ungroup()
nodes
nodes <- clusterings %>%
tidyr::gather(key = level, value = basin) %>%
group_by(level, basin) %>%
summarise(Size = n()) %>%
ungroup() %>%
mutate(level = stringr::str_replace(level, "level", ""))
nodes
nodes <- clusterings %>%
tidyr::gather(key = level, value = basin) %>%
group_by(level, basin) %>%
summarise(Size = n()) %>%
ungroup() %>%
mutate(level = stringr::str_replace(level, "level", "")) %>%
mutate(level = level, basin = basin)
nodes
matrix(1:9,3,3)*matrix(1:9,3,3)
order(c(1.2,1,3,2,5,2.3))
order(c(1.2,1,3,2,5,2.3), decreasing = TRUE)
order(c(1.2,1,3,2,5,2.3), decreasing = FALSE)
load('F:\Projects\MarkovHC\results\simulationData\example3.RData')
load('F:/Projects/MarkovHC/results/simulationData/example3.RData')
MarkovObject <- MarkovHC_3
View(MarkovHC_3)
MarkovLevels <- 1:24
result.dataframe <- as.data.frame(1:nrow(MarkovObject[["midResults"]][["symmetric_KNN_graph"]]))
colnames(result.dataframe) <- 'index'
for (i in MarkovLevels) {
result.dataframe.temp <- data.frame(matrix(nrow = nrow(result.dataframe),
ncol = 2))
colnames(result.dataframe.temp) <- c('index', paste('level', as.character(i), sep = ''))
result.dataframe.temp$index <- 1:nrow(result.dataframe.temp)
for (basin in 1:length(MarkovObject$hierarchicalStructure[[i]]$basinPoints)) {
basinj <- MarkovObject$hierarchicalStructure[[i]]$basinPoints[[basin]]
result.dataframe.temp[basinj,2] <- basin
}
result.dataframe <- merge(result.dataframe, result.dataframe.temp, by='index')
}
orderResult <- result.dataframe
dim(result.dataframe)
View(result.dataframe)
install.packages('doBy')
library(doBy)
?orderBy
levels(factor(1:10))
test <- factor(orderResult, levels = 1:max(orderResult[,1]))
class(test)
result.dataframe <- as.data.frame(1:nrow(MarkovObject[["midResults"]][["symmetric_KNN_graph"]]))
colnames(result.dataframe) <- 'index'
for (i in MarkovLevels) {
result.dataframe.temp <- data.frame(matrix(nrow = nrow(result.dataframe),
ncol = 2))
colnames(result.dataframe.temp) <- c('index', paste('level', as.character(i), sep = ''))
result.dataframe.temp$index <- 1:nrow(result.dataframe.temp)
for (basin in 1:length(MarkovObject$hierarchicalStructure[[i]]$basinPoints)) {
basinj <- MarkovObject$hierarchicalStructure[[i]]$basinPoints[[basin]]
result.dataframe.temp[basinj,2] <- as.factor(basin, levels = 1:nrow(result.dataframe.temp))
}
result.dataframe <- merge(result.dataframe, result.dataframe.temp, by='index')
}
result.dataframe <- as.data.frame(1:nrow(MarkovObject[["midResults"]][["symmetric_KNN_graph"]]))
colnames(result.dataframe) <- 'index'
for (i in MarkovLevels) {
result.dataframe.temp <- data.frame(matrix(nrow = nrow(result.dataframe),
ncol = 2))
colnames(result.dataframe.temp) <- c('index', paste('level', as.character(i), sep = ''))
result.dataframe.temp$index <- 1:nrow(result.dataframe.temp)
for (basin in 1:length(MarkovObject$hierarchicalStructure[[i]]$basinPoints)) {
basinj <- MarkovObject$hierarchicalStructure[[i]]$basinPoints[[basin]]
result.dataframe.temp[basinj,2] <- factor(basin, levels = 1:nrow(result.dataframe.temp))
}
result.dataframe <- merge(result.dataframe, result.dataframe.temp, by='index')
}
orderResult <- result.dataframe
class(orderResult[1,1])
result.dataframe <- as.data.frame(1:nrow(MarkovObject[["midResults"]][["symmetric_KNN_graph"]]))
colnames(result.dataframe) <- 'index'
for (i in MarkovLevels) {
result.dataframe.temp <- data.frame(matrix(nrow = nrow(result.dataframe),
ncol = 2))
colnames(result.dataframe.temp) <- c('index', paste('level', as.character(i), sep = ''))
result.dataframe.temp$index <- 1:nrow(result.dataframe.temp)
for (basin in 1:length(MarkovObject$hierarchicalStructure[[i]]$basinPoints)) {
basinj <- MarkovObject$hierarchicalStructure[[i]]$basinPoints[[basin]]
result.dataframe.temp[basinj,2] <- basin
}
result.dataframe <- merge(result.dataframe, result.dataframe.temp, by='index')
}
orderResult <- result.dataframe
class(orderResult)
class(orderResult[1,1])
test = orderBy(~level24+level23, orderResult)
View(test)
View(orderResult)
View(test)
test2 = split(orderResult,orderResult$level24)
View(test2)
View(test2)
test2=split(test,test$level24)
View(test2)
View(test2)
test2=split(orderResult,orderResult$level24)
View(test2)
test <- orderBy(~level24+level23, orderResult)
View(test)
as.formula('~level24+level23')
test <- orderBy(~level24+level23+level22+level21+level20, orderResult)
View(test)
View(test)
orderLevels <- 1:5
orderLevels <- paste('level',orderLevels)
orderLevels
orderLevels <- paste('level',orderLevels,sep="")
orderLevels
orderLevels <- 1:5
orderLevels <- paste('level',orderLevels,sep="")
orderLevels
length(orderLevels)
orderLevels <- paste(orderLevels, collapse = '+')
orderLevels
orderLevels <- paste('~',orderLevels, sep = '')
orderLevels
orderLevels <- 1:24
orderLevels <- orderLevels[order(orderLevels, decreasing = TRUE)]
orderLevels
orderLevels <- paste('level',orderLevels,sep='')
orderLevels
orderLevels <- paste(orderLevels, collapse = '+')
orderLevels
orderLevels <- paste('~',orderLevels, sep = '')
orderLevels
orderResult <- result.dataframe
test <- orderBy(as.formula(orderLevels), orderResult)
View(test)
View(test)
orderLevels <- 1:5
orderLevels <- orderLevels[order(orderLevels, decreasing = TRUE)]%>%
#orderLevels <- paste('level',orderLevels,sep='')
paste('level',sep='')%>%
paste(orderLevels, collapse = '+')
orderLevels
orderLevels <- 1:5
orderLevels <- orderLevels[order(orderLevels, decreasing = TRUE)]
orderLevels
orderLevels <- paste('level',.,sep='')%>%
paste(., collapse = '+')%>%
paste('~',., sep = '')
orderLevels <- 1:5
orderLevels <- orderLevels[order(orderLevels, decreasing = TRUE)]%>%
paste('level',., sep='')%>%
paste(., collapse = '+')%>%
paste('~',., sep = '')
orderLevels
library(MarkovHC)
